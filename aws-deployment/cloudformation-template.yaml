AWSTemplateFormatVersion: '2010-09-09'
Description: 'Empirica - Biomedical Knowledge Graph Application'

Parameters:
  Environment:
    Type: String
    Default: 'prod'
    AllowedValues: ['dev', 'staging', 'prod']
  
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID for the application
  
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet IDs for the application
  
  DatabasePassword:
    Type: String
    NoEcho: true
    Description: Password for the RDS database
  
  AnthropicApiKey:
    Type: String
    NoEcho: true
    Description: Anthropic API key for LLM features

Resources:
  # ECS Cluster
  EmpiricaCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub 'empirica-cluster-${Environment}'
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 1

  # Security Groups
  EmpiricaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Empirica application
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref EmpiricaSecurityGroup

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  # RDS Database
  EmpiricaDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub 'empirica-db-${Environment}'
      DBName: empirica
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: '15.4
      MasterUsername: postgres
      MasterUserPassword: !Ref DatabasePassword
      AllocatedStorage: 20
      StorageType: gp2
      VPCSecurityGroups:
        - !Ref EmpiricaSecurityGroup
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      BackupRetentionPeriod: 7
      MultiAZ: false
      PubliclyAccessible: false
      StorageEncrypted: true

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for Empirica database
      SubnetIds: !Ref SubnetIds

  # Application Load Balancer
  EmpiricaALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub 'empirica-alb-${Environment}'
      Scheme: internet-facing
      Type: application
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets: !Ref SubnetIds

  # Target Group
  EmpiricaTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub 'empirica-tg-${Environment}'
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  # ALB Listener
  EmpiricaListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EmpiricaTargetGroup
      LoadBalancerArn: !Ref EmpiricaALB
      Port: 80
      Protocol: HTTP

  # ECS Task Definition
  EmpiricaTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub 'empirica-backend-${Environment}'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 1024
      Memory: 2048
      ExecutionRoleArn: !Ref EmpiricaTaskExecutionRole
      TaskRoleArn: !Ref EmpiricaTaskRole
      ContainerDefinitions:
        - Name: empirica-backend
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/empirica-backend:latest'
          PortMappings:
            - ContainerPort: 8000
              Protocol: tcp
          Essential: true
          Environment:
            - Name: API_HOST
              Value: '0.0.0.0'
            - Name: API_PORT
              Value: '8000'
            - Name: API_RELOAD
              Value: 'false'
            - Name: DATABASE_URL
              Value: !Sub 'postgresql://postgres:${DatabasePassword}@${EmpiricaDatabase.Endpoint.Address}:5432/empirica'
            - Name: ANTHROPIC_API_KEY
              Value: !Ref AnthropicApiKey
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref EmpiricaLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - CMD-SHELL
              - 'curl -f http://localhost:8000/ || exit 1'
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60

  # ECS Service
  EmpiricaService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub 'empirica-backend-service-${Environment}'
      Cluster: !Ref EmpiricaCluster
      TaskDefinition: !Ref EmpiricaTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      PlatformVersion: LATEST
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref SubnetIds
          SecurityGroups:
            - !Ref EmpiricaSecurityGroup
          AssignPublicIp: ENABLED
      LoadBalancers:
        - ContainerName: empirica-backend
          ContainerPort: 8000
          TargetGroupArn: !Ref EmpiricaTargetGroup
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      HealthCheckGracePeriodSeconds: 60
      EnableExecuteCommand: true

  # IAM Roles
  EmpiricaTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'empirica-task-execution-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: '*'

  EmpiricaTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'empirica-task-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub '${EmpiricaS3Bucket}/*'
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # CloudWatch Log Group
  EmpiricaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/empirica-backend-${Environment}'
      RetentionInDays: 30

  # S3 Bucket for file storage
  EmpiricaS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'empirica-uploads-${Environment}-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30

  # S3 Bucket Policy
  EmpiricaS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref EmpiricaS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt EmpiricaTaskRole.Arn
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
            Resource: !Sub '${EmpiricaS3Bucket}/*'

Outputs:
  ClusterName:
    Description: ECS Cluster Name
    Value: !Ref EmpiricaCluster
    Export:
      Name: !Sub '${AWS::StackName}-ClusterName'

  ServiceName:
    Description: ECS Service Name
    Value: !Ref EmpiricaService
    Export:
      Name: !Sub '${AWS::StackName}-ServiceName'

  LoadBalancerDNS:
    Description: Application Load Balancer DNS Name
    Value: !GetAtt EmpiricaALB.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerDNS'

  DatabaseEndpoint:
    Description: RDS Database Endpoint
    Value: !GetAtt EmpiricaDatabase.Endpoint.Address
    Export:
      Name: !Sub '${AWS::StackName}-DatabaseEndpoint'

  S3BucketName:
    Description: S3 Bucket for file storage
    Value: !Ref EmpiricaS3Bucket
    Export:
      Name: !Sub '${AWS::StackName}-S3BucketName'
